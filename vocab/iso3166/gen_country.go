//go:build ignore

package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"text/template"
	"time"
)

var (
	wikidata = "https://query.wikidata.org/sparql?query=%s"
	query    = `
		SELECT ?iso3166 ?en ?nb
		WHERE {
			?country wdt:P297 ?iso3166 .
			?country rdfs:label ?en FILTER (lang(?en) = "en") .
		    ?country rdfs:label ?nb FILTER (lang(?nb) = "nb") .
		} ORDER BY ?iso3166
	`
	tmpl = template.Must(
		template.New("").Funcs(template.FuncMap{"mod": func(i, j int) bool { return i%j == 0 }}).
			Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at {{ .Timestamp }}
// using data from https://www.wikidata.org
package iso3166

import (
	"strings"
	"golang.org/x/text/language"

	"github.com/knakk/sirkulator/vocab"
	"github.com/knakk/sirkulator/internal/localizer"
)

//go:generate go run gen_alpha2.go
//go:generate go fmt alpha2.go

// Alpha2 is an ISO 3166-1 two-letter code, maintained by ublished by the International Organization
// for Standardization (ISO), to represent countries, dependent territories, and special areas of
// geographical interest.
// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
type Alpha2 string

const (
{{- range $row :=  .Countries }}
	{{ index $row 0 }} Alpha2 = {{ index $row 0 | printf "%q" }}
{{- end }}
)

var alpha2Labels = map[Alpha2][2]string{
{{- range $row :=  .Countries }}
	{{ index $row 0 }}: {{"{"}}{{ index $row 1 | printf "%q" }}, {{ index $row 2 | printf "%q" }}{{"}"}},
{{- end }}
}

var allCodes = []Alpha2{
{{- range $i, $row :=  .Countries }}
	{{- if mod $i 20 -}}{{" "}}
	{{ end -}}
	{{- index $row 0 -}},
{{- end }}
}


func ParseAlpha2(s string) (Alpha2, error) {
	s = strings.ToUpper(s)
	if _, ok := alpha2Labels[Alpha2(s)]; ok {
		return Alpha2(s), nil
	}
	return "", vocab.ErrUnknown
}

// Code returns the ISO 3166-1 alpha-2 code.
func (a Alpha2) Code() string {
	return string(a)
}

func (a Alpha2) URI() string {
	return "iso3166/"+string(a)
}

// Label returns a string representation of the Cuntry in the desired language.
func (a Alpha2) Label(tag language.Tag) string {
	match, _, _ := localizer.Matcher.Match(tag)
	if match == language.Norwegian{
		return alpha2Labels[a][1]
	}
	return alpha2Labels[a][0]
}

func Options(lang language.Tag) (res [][2]string) {
	match, _, _ := localizer.Matcher.Match(lang)
	i := 0
	if match == language.Norwegian {
		i = 1
	}
	for _, c := range allCodes {
		res = append(res, [2]string{string(c), alpha2Labels[c][i]})
	}
	return res
}

	`))
)

func main() {
	req, err := http.NewRequest(http.MethodGet, fmt.Sprintf(wikidata, url.QueryEscape(query)), nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "text/csv")
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	r := csv.NewReader(res.Body)
	r.FieldsPerRecord = 3 // iso3166, en, nb

	var recs [][]string

	for {
		rec, err := r.Read()
		if err == io.EOF {
			break
		} else if err != nil {
			log.Fatal(err)
		}
		if rec[0] == "iso3166" {
			// Skip header row.
			continue
		}
		if len(recs) > 0 && rec[0] == recs[len(recs)-1][0] {
			// Skip duplicates.
			continue
		}

		recs = append(recs, rec)
	}

	f, err := os.Create("alpha2.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	if err := tmpl.Execute(f, struct {
		Timestamp string
		Countries [][]string
	}{
		Timestamp: time.Now().Format(time.RFC3339),
		Countries: recs,
	}); err != nil {
		log.Fatal(err)
	}

}
