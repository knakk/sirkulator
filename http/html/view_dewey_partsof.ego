<%
package html

import (
    "strings"

    "github.com/knakk/sirkulator/internal/localizer"
)

type ViewDeweyPartsOf struct {
    ID       string
    From     string
    To       string
    HasMore  bool
    PartsOf  [][2]string
}

func getLast(p [][2]string) string {
    if len(p) == 0 {
        return ""
    }
    return p[len(p)-1][0]
}

func getFirst(p [][2]string) string {
    if len(p) == 0 {
        return ""
    }
    return p[0][0]
}

func (tmpl *ViewDeweyPartsOf) Render(ctx context.Context, w io.Writer) {
    l, _ := ctx.Value("localizer").(localizer.Localizer)
%>

<ego:TablePaginated
    ID="parts-of"
    Class="dewey"
    Limit=10
    Last=getLast(tmpl.PartsOf)
    First=getFirst(tmpl.PartsOf)
    From=tmpl.From
    To=tmpl.To
    HasMore=tmpl.HasMore
    PrevLabel=l.Translate("Previous page")
    NextLabel=l.Translate("Next page")
    Target=fmt.Sprintf("/metadata/dewey/%s/partsof?", tmpl.ID) >

    <tbody>
        <% for _, p := range tmpl.PartsOf { %>
            <tr>
                <td><strong><%= p[0] %></strong>
                <td><a href="/metadata/dewey/<%= p[0] %>"><%= strings.TrimPrefix(p[1], p[0]) %></a></td>
            </tr>
        <% } %>
    </tbody>

</ego:TablePaginated>

<% } %>
